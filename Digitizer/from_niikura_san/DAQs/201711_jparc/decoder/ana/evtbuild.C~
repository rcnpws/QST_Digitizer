// ======================================================
// -- Analysis.C
//  main program for simple analysis
//  normally user do not need to modify this file
//
//                 written by M. Niikura
// 
// $Id: evtbuild.C 2017-03-02 08:10:52 niikura Exp $

// -- ROOT headers
#include <TTree.h>
#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TF1.h>
#include <TH2.h>
#include <TStyle.h>
#include <TCutG.h>
#include <TString.h>
#include <TDatime.h>

// -- General headers
#include <cmath>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdlib>
#include <unistd.h>

// -- User headers
#define BN0_cxx
#define BN1_cxx
#define Ge0_cxx
#define Ge2_cxx

#include "BN0.h"
#include "BN1.h"
#include "Ge0.h"
#include "Ge2.h"


using namespace std;

int main(int argc, char** argv)
{

  if(argc>2 || argc==1){
    cout << Form("Usage: ./evtbuild <RUN_NUMBER>\n");
    exit(0);
  }
  
  Int_t RunNumber = atoi(argv[argc-1]);
  TString inputfilename = Form("./root/run%04d.root",RunNumber);
  // TFIle *inputfile = TFile::Open(Form("./root/run%04d.root",RunNumber));

  TChain *chain0 = new TChain("tree0");
  TChain *chain1 = new TChain("tree1");
  TChain *chain2 = new TChain("tree2");
  TChain *chain3 = new TChain("tree3");

  chain0->Add(inputfilename.Data());
  chain1->Add(inputfilename.Data());
  chain2->Add(inputfilename.Data());  
  chain3->Add(inputfilename.Data());

  Double_t tmax, tmin;

  if(RunNumber==3069){
    tmax=-18500;
    tmin=-18050;
  }else if(RunNumber==3070){
    tmax=-21050;
    tmin=-20600;
  }else if(RunNumber==3071){
    tmax=-19750;
    tmin=-19300;
  }else if(RunNumber==3072){
    tmax=-18500;
    tmin=-18050;
  }else if(RunNumber==3073){
    tmax=-19750;
    tmin=-19300;
  }else if(RunNumber==3074){
    tmax=-19950;
    tmin=-19500;
  }else{
    tmax=-19750;
    tmin=-19300;
  }    
  
  TFile *outputfile = TFile::Open(Form("./root/sorted%04d.root",RunNumber),"recreate");
  
  BN0 fData0(chain0);
  BN1 fData1(chain1);
  Ge0 fData2(chain2);
  Ge2 fData3(chain3);


  // TH1D *TSdiff0 = new TH1D("TSdiff0","time1-time0",1000,-1e4,1e4);
  TH1D *TSdiff1 = new TH1D("TSdiff1","time1-time0",1000,-2.4e4,-1.4e4);
  TH1D *TSdiff2 = new TH1D("TSdiff2","time2-time0",1000,-2.4e4,-1.4e4);
  TH1D *h_gamma1 = new TH1D("h_gamma1","gamma Ge0",8000,0.,2000.);
  TH1D *h_gamma2 = new TH1D("h_gamma2","gamma Ge2",8000,0.,2000.);
  TH1D *h_gamma = new TH1D("h_gamma","gamma Ge0 + Ge2",8000,0.,2000.);
  TH2D *h_tg1 = new TH2D("h_tg1","T vs G Ge0", 2000,-1e5,1e5,10000,0.,5000);
  TH2D *h_tg2 = new TH2D("h_tg2","T vs G Ge2", 2000,-1e5,1e5,10000,0.,5000);

  Long64_t start_evt1=0;
  Long64_t start_evt2=0;

  Long64_t imax = fData0.GetNumberOfEntry();
  
  for(int i=0;i<imax;i++){

    if(i%1000==0)
    cout << i << endl;
      
    Long64_t time0 = fData0.GetTimeStamp(i)*8;
    // Long64_t time1 = fData1.GetTimeStamp(i)*8;
    // Long64_t time2 = fData2.GetTimeStamp(i)*8;
    // TSdiff1->Fill(time1-time0);
    // TSdiff2->Fill(time2-time0);
    // cout << endl << "==============" << endl;
    // cout << Form("%10lld %10lld\n",time0,time1);

    Long64_t j1=start_evt1;
    Long64_t j2=start_evt2;
    Long64_t time1=0;
    Long64_t time2=0;

    Long64_t maxj1 = fData2.GetNumberOfEntry();
    Long64_t maxj2 = fData3.GetNumberOfEntry();

    while(1){
      // === Ge0
      time1 = fData2.GetTimeStamp(j1)*2;
      j1++;
      if(j1>maxj1) break;
      
      // cout << Form("%lld %lld %lld\n",time0, time2, time2-time0);
      // cout << " j = " << j << endl;
      // cout << " startevt = " << start_evt << endl;

      if(time1-time0<-100000){
    	start_evt1=j1;
    	continue;
      }
      else if(time1-time0>100000.){
    	break;
      }

      h_tg1->Fill(time1-time0, fData2.GetEnergy(j1-1));
      TSdiff1->Fill(time1-time0);
      if(time1-time0>tmax && time1-time0<tmin){
	h_gamma1->Fill(fData2.GetEnergy(j1-1));
	h_gamma->Fill(fData2.GetEnergy(j1-1));
      }
    }

    while(1){
      // === Ge2
      time2 = fData3.GetTimeStamp(j2)*2;
      j2++;
      if(j2>maxj2) break;
      
      // cout << Form("%lld %lld %lld\n",time0, time2, time2-time0);
      // cout << " j = " << j << endl;
      // cout << " startevt = " << start_evt << endl;

      if(time2-time0<-100000){
    	start_evt2=j2;
    	continue;
      }
      else if(time2-time0>100000.){
    	break;
      }

      h_tg2->Fill(time2-time0, fData3.GetEnergy(j2-1));
      TSdiff2->Fill(time2-time0);
      if(time2-time0>tmax && time2-time0<tmin){
	h_gamma2->Fill(fData3.GetEnergy(j2-1));
	h_gamma->Fill(fData3.GetEnergy(j2-1));
      }

    }
      
    // Long64_t time3 = fData3.GetTimeStamp(i)*2;
    // cout << Form("          %10lld %10lld %10lld\n",
    // 		 time1-time0,time2-time0,time3-time0);
  }

  outputfile->Write();
  outputfile->Close();
  
}

ULong64_t BN0::GetTimeStamp(Long64_t jevent)
{
  fChain->GetEntry(jevent);
  return TimeStamp;
}

Long64_t BN0::GetNumberOfEntry()
{
  return fChain->GetEntries();
}

ULong64_t BN1::GetTimeStamp(Long64_t jevent)
{
  fChain->GetEntry(jevent);
  return TimeStamp;
}

ULong64_t Ge0::GetTimeStamp(Long64_t jevent)
{
  fChain->GetEntry(jevent);
  return TimeStamp;
}

Long64_t Ge0::GetNumberOfEntry()
{
  return fChain->GetEntries();
}

Double_t Ge0::GetEnergy(Long64_t jevent)
{
  fChain->GetEntry(jevent);
  return GeE;
}

Long64_t Ge2::GetNumberOfEntry()
{
  return fChain->GetEntries();
}

Double_t Ge2::GetEnergy(Long64_t jevent)
{
  fChain->GetEntry(jevent);
  return GeE;
}

ULong64_t Ge2::GetTimeStamp(Long64_t jevent)
{
  fChain->GetEntry(jevent);
  return TimeStamp;
}

